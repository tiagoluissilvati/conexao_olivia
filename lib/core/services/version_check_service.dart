import 'dart:io';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import '../services/supabase_service.dart';
import '../../modules/auth/models/app_version_model.dart';

enum VersionStatus {
  upToDate,      // Vers√£o atual, n√£o precisa atualizar
  updateAvailable, // Atualiza√ß√£o dispon√≠vel mas n√£o obrigat√≥ria
  updateRequired,  // Atualiza√ß√£o obrigat√≥ria
}

class VersionCheckResult {
  final VersionStatus status;
  final AppVersionModel? serverVersion;
  final String? currentVersion;
  final int? currentVersionCode;
  final String? message;

  VersionCheckResult({
    required this.status,
    this.serverVersion,
    this.currentVersion,
    this.currentVersionCode,
    this.message,
  });

  bool get needsUpdate =>
      status == VersionStatus.updateRequired ||
          status == VersionStatus.updateAvailable;

  bool get isForceUpdate => status == VersionStatus.updateRequired;
}

class VersionCheckService {
  /// Verifica se o app precisa ser atualizado
  static Future<VersionCheckResult> checkVersion() async {
    try {
      print('üì± === VERIFICANDO VERS√ÉO DO APP ===');

      // 1. Obter informa√ß√µes do app atual
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersionName = packageInfo.version;
      final currentVersionCode = int.tryParse(packageInfo.buildNumber) ?? 0;

      print('   Vers√£o atual: $currentVersionName (code: $currentVersionCode)');

      // 2. Determinar plataforma
      final platform = Platform.isAndroid ? 'android' : Platform.isIOS ? 'ios' : 'all';
      print('   Plataforma: $platform');

      // 3. Buscar vers√£o do servidor
      print('üîç Buscando vers√£o no servidor...');
      final response = await SupabaseService.client
          .rpc('get_latest_app_version', params: {'p_platform': platform})
          .select()
          .single();

      print('üì° Resposta do servidor: $response');

      final serverVersion = AppVersionModel.fromJson(response);
      print('   Vers√£o servidor: ${serverVersion.versionName} (code: ${serverVersion.versionCode})');
      print('   Vers√£o m√≠nima obrigat√≥ria: ${serverVersion.minRequiredVersionCode}');
      print('   Force update: ${serverVersion.isForceUpdate}');

      // 4. Comparar vers√µes
      VersionStatus status;
      String? message;

      if (currentVersionCode < serverVersion.minRequiredVersionCode) {
        // Vers√£o atual √© menor que a m√≠nima obrigat√≥ria
        status = VersionStatus.updateRequired;
        message = serverVersion.updateMessage ??
            'Esta vers√£o do app n√£o √© mais suportada. Por favor, atualize para continuar usando.';
        print('‚ùå ATUALIZA√á√ÉO OBRIGAT√ìRIA');
      } else if (serverVersion.isForceUpdate && currentVersionCode < serverVersion.versionCode) {
        // Existe uma vers√£o mais nova e est√° marcada como obrigat√≥ria
        status = VersionStatus.updateRequired;
        message = serverVersion.updateMessage ??
            'Uma atualiza√ß√£o importante est√° dispon√≠vel. Por favor, atualize para continuar.';
        print('‚ö†Ô∏è ATUALIZA√á√ÉO FOR√áADA');
      } else if (currentVersionCode < serverVersion.versionCode) {
        // Existe uma vers√£o mais nova mas n√£o √© obrigat√≥ria
        status = VersionStatus.updateAvailable;
        message = serverVersion.updateMessage ??
            'Uma nova vers√£o est√° dispon√≠vel! Atualize para obter as √∫ltimas melhorias.';
        print('‚ÑπÔ∏è Atualiza√ß√£o dispon√≠vel (opcional)');
      } else {
        // App est√° na vers√£o mais recente
        status = VersionStatus.upToDate;
        message = null;
        print('‚úÖ APP ATUALIZADO');
      }

      print('‚úÖ === VERIFICA√á√ÉO CONCLU√çDA ===');

      return VersionCheckResult(
        status: status,
        serverVersion: serverVersion,
        currentVersion: currentVersionName,
        currentVersionCode: currentVersionCode,
        message: message,
      );

    } catch (e, stackTrace) {
      print('‚ùå === ERRO NA VERIFICA√á√ÉO DE VERS√ÉO ===');
      print('   Erro: $e');
      print('   Tipo: ${e.runtimeType}');
      print('   Stack trace: $stackTrace');

      // Em caso de erro, permitir que o app continue
      // (pode ser problema de conex√£o, tabela n√£o existe ainda, etc.)
      return VersionCheckResult(
        status: VersionStatus.upToDate,
        message: null,
      );
    }
  }

  /// Abre a loja de apps para atualiza√ß√£o
  static Future<void> openStore() async {
    try {
      print('üõí Tentando abrir loja...');

      // Buscar URLs da loja
      final platform = Platform.isAndroid ? 'android' : Platform.isIOS ? 'ios' : 'all';
      final response = await SupabaseService.client
          .rpc('get_latest_app_version', params: {'p_platform': platform})
          .select()
          .single();

      final serverVersion = AppVersionModel.fromJson(response);

      String? storeUrl;
      if (Platform.isAndroid && serverVersion.storeUrlAndroid != null) {
        storeUrl = serverVersion.storeUrlAndroid;
      } else if (Platform.isIOS && serverVersion.storeUrlIos != null) {
        storeUrl = serverVersion.storeUrlIos;
      }

      if (storeUrl != null && storeUrl.isNotEmpty) {
        print('üì± Abrindo URL: $storeUrl');

        // Importar: import 'package:url_launcher/url_launcher.dart';
        final uri = Uri.parse(storeUrl);
        if (await canLaunchUrl(uri)) {
          await launchUrl(
            uri,
            mode: LaunchMode.externalApplication,
          );
          print('‚úÖ Loja aberta com sucesso');
        } else {
          print('‚ùå N√£o foi poss√≠vel abrir a loja');
        }
      } else {
        print('‚ö†Ô∏è URL da loja n√£o configurada ainda');
        print('‚ÑπÔ∏è Configure as URLs no banco de dados quando o app for publicado');
      }

    } catch (e) {
      print('‚ùå Erro ao abrir loja: $e');
    }
  }
}